Today is 12/17/2019
    Agenda:
        BDD
        Cucumber BDD
        Feature file
        Runners
        Step definitions
        Gherkin: Given, When, Then, And...
        Scenario
        Cucumber Tags
        Report
        *If we have time, we will talk about cucumber hooks
######################################
1. For class, we use vytrack, but homework will be based on bitrix.
2. Since we have long break, we can meet on optional sessions to discuss homework solutions.
3. You will have new homework  based on bitrix, that you will have to do with cucumber project.
######################################################
BDD it's a branch of TDD
TDD ins simple words, it's when every method is covered by unit test, to ensure code quality.
BDD or Behavior Driven Development - in simple words, it's when we write human readable business requirements.
For any new feature that has to be developed, we create user story, and user story has some template:
As user, I want to be able to....
Every story has acceptance criteria
Entire team participate sprint planning meeting to discuss stories for next sprint.
Since everyone is looking into same requirements, there is gonna be less confusion during testing and development.
In my project, PO was providing business requirements, then these requirements where written into use
story with acceptance criteria. PO explains what feature team has to develop and how this feature should work.
Based on user story we create feature files to create tests.
To implement BDD into our framework we use Cucumber.
*Cucumber allows to write test scenarios from end-user perspective.
*Cucumber allows to make test scenarios understandable for non-technical people
*Cucumber use special language that calls gherkin
gherkin it's not a programing language, it's a collection of keywords that are used to write scenarios:
Given, When, Then, And, But
Scenario, Scenario Outline, Feature, Background
As you remember, we were doing DDT with testng through @DataProvider.
Cucumber, supports DDT with Scenario Outline.
Feature: it's a gherkin keyword. After : you need to explain what feature will be tested here.
Also we can add user story title to feature description.
Feature keyword should be used only once per .feature file.
Scenario/Scenario Outline = can be a lot.
Feature: Login
  As user, I want to be able to login into vytrack
  under different roles with username and password
  Scenario: Login as store manager
    Given user is on the login page
    Then user logs in as store manager
    And user verifies that "Dashboard" page subtitle is displayed
test case = cucumber test scenario
To create test scenario, use Scenario: keyword
then after : describe test scenario
Then we go to CucumberRunner and implement runner class.
package com.vytrack.runners;
import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import org.junit.runner.RunWith;
@RunWith(Cucumber.class)
@CucumberOptions(
     features = "src/test/resources/features" // path to feature folder
)
public class CucumberRunner {
}
Once you click run, cucumber will generate step definitions. Every scenario consists of test steps.
Every test step has a code implementation. Runner class will glue tests steps and step definitions. But, you need to tell runner class where you want to store step definitions.
io.cucumber.junit.UndefinedThrowable: The step "user verifies that "Dashboard" page subtitle is displayed" is undefined
There were undefined steps. You can implement missing steps with the snippets below:
@Given("user is on the login page")
public void user_is_on_the_login_page() {
    // Write code here that turns the phrase above into concrete actions
    throw new cucumber.api.PendingException();
}
@Then("user logs in as store manager")
public void user_logs_in_as_store_manager() {
    // Write code here that turns the phrase above into concrete actions
    throw new cucumber.api.PendingException();
}
@Then("user verifies that {string} page subtitle is displayed")
public void user_verifies_that_page_subtitle_is_displayed(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new cucumber.api.PendingException();
}
        features = "src/test/resources/features", // path to features
        glue = "com/vytrack/step_definitions"    // path to step definitions
dryRun = false (by default)
if dryRun = true, it will not run your tests, it will check if every single  test step has code implementation , which is step definition method
                                                All of them will have same name except first keyword
 Given  user is on the login page                - test step
@Given("user is on the login page")              - code implementation of test step
    public void user_is_on_the_login_page() {    - method name
        System.out.println("I am on the login page");
    }
Content of tag is important. Content is case and space sensitive.
Method name doesn't really matter. But it will be created according to step with snake case (when every word is connected with "_").
Also, steps are reusable. Create test step once, and you use it in every feature file.
Test steps in cucumber are reusable. If we pass some parameter with "", we can make them even more flexible.
dryRun = true | - will check if every test step has step definition method
IF some steps are missing code implementation, cucumber will print snippets into console.
Paste these snippets into step definition class.
dryRun = false| - run tests
################################
Steps to write tests with cucumber:
1. Create feature file and write test scenarios.
2. Go to CucumberRunner class and execute dryRun.
    make sure you specified:
     glue = "com/vytrack/step_defintions"
     features="src/test/resources/features"
3. Implement step definitions and delete original content from step definitions.
4. Once you provided code, change dryRun to false and run tests indeed.